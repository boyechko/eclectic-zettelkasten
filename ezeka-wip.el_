;;;=============================================================================
;;; Zettel title display
;;;=============================================================================

;; The following can be added to emacs config file to continuously update the
;; frame title:
;;
;; (add-hook 'post-command-hook 'ezeka-update-frame-title)
(defun ezeka-update-frame-title ()
  "Evaluates Displays Zettel title of the file under cursor in minibuffer."
  (while-no-input
    (redisplay)
    (let* ((fmt-data nil)
           (metadata
            (ezeka-file-metadata
             (cond ((ezeka-link-at-point-p)
                    (setq fmt-data '("%s: %s" :id :title))
                    (ezeka-link-file (ezeka-link-at-point)))
                   ((ezeka-file-p buffer-file-name t)
                    (setq fmt-data '("%s: %s" :id :title))
                    buffer-file-name)
                   ((eq major-mode 'magit-status-mode)
                    (setq fmt-data '("%s" :title))
                    (magit-file-at-point))))))
      (when fmt-data
        (modify-frame-parameters
         (selected-frame)
         (list (cons 'name
                     (apply #'format
                            (car fmt-data)
                            (mapcar (lambda (key)
                                      (alist-get key metadata))
                                    (cdr fmt-data))))))))))

;; TODO: WIP, doesn't work
(defun ezeka-add-help-echo (beg end)
  "Add help echo property to the text in the current buffer between BEG and
END. If BEG and END are not given, do so through the entire buffer."
  (interactive "r")
  (cl-flet ((_link-title (link)
              "Try to retrieve the title of the given LINK."
              (alist-get :title
                (ezeka-file-metadata (ezeka-link-file link)))))
    (save-excursion
      (goto-char beg)
      (while (org-next-link)
        (org-link-add-props "fuzzy" "Testing")))))

(defun ezeka-link-title-in-frame-title ()
  "Displays Zettel title of the link under cursor in the frame title."
  (while-no-input
    (redisplay)
    (let (file line)
      (when (and (eq major-mode 'magit-status-mode)
                 (setq file (magit-file-at-point))
                 (ezeka-file-p file)
                 (setq line (magit-file-line file)))
        (let ((metadata (ezeka-decode-combined-title
                         (car (split-string line "title: " t)))))
          (message "%s | %s"
                   (alist-get :id metadata) (alist-get :title metadata)))))))

;;;=============================================================================
;;; Zmoving notes
;;;=============================================================================

(defun rb-temp-advice (&rest _args)
  (switch-to-buffer-other-window octavo-index-buffer-name)
  (setq octavo-index-view--kill t)
  (octavo-index-next-line))
(advice-add 'ezeka-zmove-to-another-kasten :after #'rb-temp-advice)

(defun rb-beg-of-title ()
  (interactive)
  (end-of-line)
  (search-backward "}" nil t 1)
  (forward-char 2))

(defun rb-end-of-title ()
  (interactive)
  (unless (re-search-forward "[@&(]" (point-at-eol) t 1)
    (re-search-forward ".txt" (point-at-eol) t 1))
  (backward-char 2))

(defun rb-enclose-in-single-quotes (arg)
  "Enclose the current word in single quotes. A numerical argument
encloses the last N words."
  (interactive "P")
  (let ((n (if (numberp arg) arg 1))
        (quote-char ?')
        (end (1+ (cdr (bounds-of-thing-at-point 'word)))))
    (save-excursion
      (let ((start (car (if (= n 1)
                            (bounds-of-thing-at-point 'word)
                          (progn
                            (backward-word n)
                            (bounds-of-thing-at-point 'word))))))
        (goto-char start)
        (insert quote-char)
        (goto-char end)
        (insert quote-char)))
    (forward-char)))

(general-define-key :keymaps 'wdired-mode-map
  [remap forward-sentence] 'rb-end-of-title
  [remap backward-sentence] 'rb-beg-of-title
  "M-'"   'rb-enclose-in-single-quotes
  "C-c '" (lambda ()
            (interactive)
            (rb-beg-of-title)
            (insert "'")
            (rb-end-of-title)
            (insert "'"))
  "C-c _" (lambda ()
            (interactive)
            (rb-beg-of-title)
            (insert "_")
            (rb-end-of-title)
            (insert "_")))

;;;=============================================================================
;;; Propertized titles
;;;=============================================================================

(defun octavo-index--propertize-title (title)
  "Returns a propertized TITLE."
  (let ((result title))
    (when (string-match "_\\([^_]+\\)_" title)
      (setq result
        (replace-match (propertize (match-string 1 title)
                                   'face '(:slant italic))
                       nil nil title 0)))
    result))

;;;=============================================================================
;;; Tests
;;;=============================================================================

(ert-deftest tests/ezeka- ()
  (let ((mdata (ezeka-link-file )))
    (ezeka--link-with-metadata "a-1234" '(:author :title) :before )))

;;;=============================================================================
;;; Something to do with Scriptum
;;;=============================================================================

(defun ezeka-octavo--set-scriptum-project (filename &optional new-parent other-window)
  "Set parent metadata of FILENAME to NEW-PARENT (a link).
If NEW-PARENT is NIL, let user choose the the Zettel, unless
\\[universal-argument] OTHER-WINDOW is non-nil and there is something
usable in the other window, in which case set that as the new parent."
  (interactive (list (ezeka--grab-dwim-file-target)
                     nil
                     (when-let* ((arg current-prefix-arg)
                                 (other-window (ezeka--note-in-other-window))
                                 (numerusp (ezeka-file-kasten other-window)))
                       other-window)))
  (let ((new-parent
         (or new-parent
             other-window
             (ezeka-file-link
              (ezeka-octavo-with-kasten "numerus" ; FIXME: Hardcoded
                (octavo--select-file "Scriptum file's project: "))))))
    (ezeka--update-metadata-values filename nil :parent new-parent)))

;;;=============================================================================
;;; Experiment with consult-grep instead of rgrep
;;;=============================================================================

(defun ezeka-rgrep (string)
  "Runs a recursive grep (`rgrep') for the given STRING across all Zettel."
  (interactive "sRgrep in Zettelkasten: ")
  (grep-compute-defaults)
  ;; (rgrep string "*.txt" (f-slash ezeka-directory) nil)
  (consult-grep (f-slash ezeka-directory) string)
  )

;;;=============================================================================
;;; Fix for `ezeka-completion-table' width issue
;;;=============================================================================

(defun ezeka-completion-table (files)
  "Turn list of FILES into completion table suitable for `completing-read'."
  ;;                    iw  lw     tw     kw
  ;;                  * ID  LABEL  TITLE  CITEKEY
  (let* ((ww (window-width (minibuffer-window)))
         (iw 14) (lw 10) (kw 20) (extra-padding (round (/ ww 6.5)))
         (tw (- ww (+ iw lw kw extra-padding)))
         (fmt (format "%%s%%-%ds %%-%ds %%-%ds  %%%ds" iw lw tw kw))
         (dashes (make-string (- ww extra-padding 10) ?-)))
    (append (mapcar (lambda (file)
                      (when (ezeka-file-p file)
                        (let* ((metadata (ezeka-file-metadata file t))
                               (title (alist-get :title metadata))
                               (citekey (alist-get :citekey metadata))
                               (buf (get-file-buffer file))
                               (line (format
                                      fmt
                                      (if (and buf (buffer-modified-p buf)) "*" " ")
                                      (or (alist-get :id metadata)
                                          (file-name-base file))
                                      (alist-get :label metadata)
                                      (when title
                                        (cl-subseq title
                                                   0 (min (length title) tw)))
                                      (if citekey
                                          (cl-subseq citekey
                                                     0 (min (length citekey) kw))
                                        ""))))
                          (cons line file))))
                    files)
            (format "--- %3d / %3d (%0.1f) %s"
                    ww
                    (+ iw lw kw tw extra-padding)
                    (/ ww extra-padding)
                    dashes))))

;;;=============================================================================
;;; Ezeka-link struct
;;;=============================================================================

(cl-defstruct (ezeka--link (:constructor ezeka--link-create)
                           (:copier nil))
  kasten id)
