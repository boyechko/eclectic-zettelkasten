#!/usr/bin/env ruby
# Replace wiki links from before to after in files read from STDIN

require 'clamp'
require_relative 'zettel'

Clamp do
  parameter "BEFORE", "the link text to replace", :attribute_name => :before
  parameter "AFTER", "link text to replace with", :attribute_name => :after

  def execute
    # Need to get rid of ARGV arguments before ARGF.each_line starts reading
    # from STDIN
    until ARGV.empty? do
      ARGV.shift
    end

    # Read list of files to replace the links in from STDIN
    ARGF.each_line do |line|
      line = line.strip

      if !line.empty?
        zettel = Zettelkaesten.zettel_from_path(line)

        # Check that the file exists and is either a numerus currens or datetime
        if zettel
          n = zettel.replace_links(before, after)
          zettel.write_file
          puts "Replaced #{n.to_s} occurence(s) in #{zettel.slug}"
        else
          STDERR.puts "Error: File '#{line}' doesn't appear valid; skipping"
        end
      end
    end
  end
end
