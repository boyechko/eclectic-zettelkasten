#!/usr/bin/env ruby
# coding: utf-8
# Move the given zettel to a new location

# FIXME:
# - the path now must be absolute; allow relative path

require 'clamp'
require_relative 'zettel'

ZETTEL_DIR = Zettelkaesten.root
EXT = Zettelkaesten.ext

Clamp do
  parameter "SOURCE", "Zettel to move (link or filepath)",
            :attribute_name => :source_string
  parameter "TARGET", "where to move the Zettel (link or filepath)",
            :attribute_name => :target_string

  def execute
    if Numerus.valid_link?(source_string) || Tempus.valid_link?(source_string)
      source = Zettelkaesten.zettel_from_link(source_string)
    elsif Numerus.valid_path?(source_string) || Tempus.valid_path?(source_string)
      source = Zettelkaesten.zettel_from_path(source_string)
    else
      puts "zmove: Source is neither a valid link nor a valid path."
      exit(1)
    end
    raise "Source is not initialized" unless source
    source_rel = source.relative_path

    if Numerus.valid_link?(target_string) || Tempus.valid_link?(target_string)
      target = Zettelkaesten.zettel_from_link(target_string)
    elsif Numerus.valid_path?(target_string) || Tempus.valid_path?(target_string)
      target = Zettelkaesten.zettel_from_path(target_string)
    else
      puts "zmove: Target is neither a valid link nor a valid path."
      exit(1)
    end
    target_rel = target.relative_path

    # Give user chance to interrupt
    puts "zmove: Press [Enter] to move #{source_rel} to #{target_rel}..."
    STDIN.gets

    # Move the files themselves
    Dir.chdir(Zettelkaesten.root)
    system("hg mv #{source_rel} #{target_rel}")
    if $?.exitstatus != 0
      puts "zmove: Mercurial could not move the file; aborting"
      exit(1)
    end

    # Change the title, add oldname, and then retouch to original modtime
    newslug = target.slug
    target.read_file            # re-read the moved target
    if target.metadata
      target.metadata['title'] = target.metadata['title']
                                   .gsub("ยง#{source.slug}.", "ยง#{newslug}.")
      if target.metadata['oldnames'].is_a?(Array)
        target.metadata['oldnames'].push(source.slug)
      else
        target.metadata['oldnames'] = [ source.slug ]
      end
      target.write_file
    else
      puts "zmove: The file has no metadata; leaving file unchanged"
      exit(1)
    end
    system("zfix", "-o", source.slug, target.relative_path.to_s)

    # Find and replace all wiki links to $source with $target
    links = `zlinksto #{source.slug}`
    if !links.empty?
      puts "zmove: Replace all wiki links to #{source.link} with #{target.link}..."
      puts links + "\nPress [Enter] to continue..."
      STDIN.gets
      IO.popen("zreplacelinks #{source.slug} #{target.slug}") do |subproc|
        subproc.write(links)
        subproc.close_write
        puts subproc.read
      end
    else
      puts "zmove: No links needed to be replaced; we're done."
    end
  end
end
