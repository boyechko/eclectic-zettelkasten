#!/usr/bin/env ruby
# coding: utf-8
# Move the given zettel to a new location

# FIXME:
# - the path now must be absolute; allow relative path

require 'clamp'
require_relative 'zettel'

ZETTEL_DIR = Zettelkaesten.root
EXT = Zettelkaesten.ext

Clamp do
  parameter "SOURCE", "Zettel to move (link or filepath)",
            :attribute_name => :source_string
  parameter "TARGET", "where to move the Zettel (link or filepath)",
            :attribute_name => :target_string
  option ["-i", "--interactive"], :flag, "interactive", :attribute_name => :interactive

  # Updates the title, replacing oldslug with newslug, and recording oldslug as
  # oldname.
  def update_title(zettel, oldslug, newslug)
    zettel.read_file

    if zettel.metadata
      zettel.metadata[:title] =
        zettel.metadata[:title].gsub("ยง#{oldslug}.", "ยง#{newslug}.")

      zettel.metadata[:oldname] = oldslug

      #zettel.metadata[:modified] = Time.now.to_date
      zettel.write_file
    else
      STDERR.puts "The file has no metadata; cannot update title"
      exit(1)
    end
  end

  def execute
    if Numerus.valid_link?(source_string) || Tempus.valid_link?(source_string)
      source = Zettelkaesten.zettel_from_link(source_string)
    elsif Numerus.valid_path?(source_string) || Tempus.valid_path?(source_string)
      source = Zettelkaesten.zettel_from_path(source_string)
    else
      STDERR.puts "Source is neither a valid link nor a valid path."
      exit(1)
    end
    raise "Source is not initialized" unless source
    source_rel = source.relative_path

    if Numerus.valid_link?(target_string) || Tempus.valid_link?(target_string)
      target = Zettelkaesten.zettel_from_link(target_string)
    elsif Numerus.valid_path?(target_string) || Tempus.valid_path?(target_string)
      target = Zettelkaesten.zettel_from_path(target_string)
    else
      STDERR.puts "Target is neither a valid link nor a valid path."
      exit(1)
    end
    target_rel = target.relative_path

    # Give user chance to interrupt if using interactively
    if interactive?
      puts "--> Press [Enter] to move #{source_rel} to #{target_rel}..."
      STDIN.gets
    else
      puts "Moving #{source_rel} to #{target_rel}..."
    end

    # Move the files themselves
    Dir.chdir(Zettelkaesten.root)
    system("hg mv -f #{source_rel} #{target_rel}")
    if $?.exitstatus != 0
      STDERR.puts "Mercurial could not move the file; aborting"
      exit(1)
    end

    # Change the title and add oldname
    update_title(target, source.slug, target.slug)

    # Find and replace all wiki links to $source with $target
    links = `zlinksto #{source.slug}`
    if !links.empty?
      if interactive?
        puts links + "--> Press [Enter] to replace links in the above files..."
        STDIN.gets
      else
        puts "Replacing links in the following files:" + links
      end

      IO.popen("zreplacelinks #{source.slug} #{target.slug}", 'w+') do |subproc|
        subproc.write(links)
        subproc.close_write
        subproc.read.split("\n").each do |l|
          puts "#{l}"
        end
        puts
      end
    else
      puts "No links needed to be replaced; we're done."
    end
  end
end
