#!/usr/bin/env ruby
# Fix the timestamp of the given zettel

require 'clamp'
require 'time'
require_relative 'zettel'

EXT = Zettel.ext

Clamp do
  parameter "FILE", "zettel file for which to fix the timestamp",
            :attribute_name => :file
  option ["-f", "--fromname"], :flag, "parse the time from filename",
         :attribute_name => :fromname

  # Get the modified or created date from the Zettel, returning a Time object
  def metadata_date(file)
    zettel = Zettel.new_from_path(file)
    if zettel && zettel.read_file
      if zettel.metadata[:modified]
        return zettel.metadata[:modified]
      else
        return zettel.metadata[:created]
      end
    else
      raise "Could not create zettel object from #{file}"
    end
  end

  # Returns true if both times have the same date
  def same_date?(time1, time2)
    time1.year == time2.year and time1.yday == time2.yday
  end

  # Retouch the given file with the new mtime (as Time)
  def retouch(file, new_mtime)
    return system("touch", "-t", "#{new_mtime.strftime "%Y%m%d%H%M"}", file)
  end

  # Script point of entry
  def execute
    # Show which file we're working on
    printf("%20s: ", File.basename(file))

    # Get the date from filename, if available, otherwise us internal metadata
    if fromname? && File.basename(file) =~ /^([0-9]{8}T[0-9]{4})\./
      metadata_time = Time.parse($1)
    else
      metadata_time = metadata_date(file)
    end

    # Retouch the file if needed
    if same_date?(File.mtime(file), metadata_time)
      # Everything is good, nothing to do
      puts "Nothing to do"
    else
      # Retouch to most precise available metadata time, but increase by a
      # second to make sure git notices the change (since might include cleanup,
      # etc.).
      new_time = metadata_time + 1
      if retouch(file, new_time)
        puts "Retouched to #{new_time.strftime("%F %H:%M:%S")}"
      end
    end
  end
end
